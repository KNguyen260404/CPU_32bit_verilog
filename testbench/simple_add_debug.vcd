$date
	Sat Aug  2 11:32:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Simple_ADD_Debug_tb $end
$var wire 4 ! pipeline_state [3:0] $end
$var wire 32 " pc_current [31:0] $end
$var wire 32 # instruction_debug [31:0] $end
$var wire 32 $ debug_reg3 [31:0] $end
$var wire 32 % debug_reg2 [31:0] $end
$var wire 32 & debug_reg1 [31:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$scope module cpu $end
$var wire 1 ' clk $end
$var wire 32 ) debug_reg1 [31:0] $end
$var wire 32 * debug_reg2 [31:0] $end
$var wire 32 + debug_reg3 [31:0] $end
$var wire 1 , flush_ex $end
$var wire 1 - flush_id $end
$var wire 1 . flush_mem $end
$var wire 32 / instruction_debug [31:0] $end
$var wire 32 0 pc_current [31:0] $end
$var wire 1 ( reset $end
$var wire 1 1 stall_ex $end
$var wire 1 2 stall_id $end
$var wire 1 3 stall_if $end
$var wire 1 4 stall_mem $end
$var wire 32 5 write_back_data [31:0] $end
$var wire 1 6 wb_reg_write $end
$var wire 2 7 wb_reg_src [1:0] $end
$var wire 1 8 wb_mem_to_reg $end
$var wire 32 9 rs2_data [31:0] $end
$var wire 32 : rs1_data [31:0] $end
$var wire 4 ; pipeline_state [3:0] $end
$var wire 32 < pc_next [31:0] $end
$var wire 32 = memory_read_data [31:0] $end
$var wire 32 > instruction_fetch [31:0] $end
$var wire 32 ? immediate [31:0] $end
$var wire 1 @ id_reg_write $end
$var wire 2 A id_pc_src [1:0] $end
$var wire 1 B id_mem_write $end
$var wire 1 C id_mem_to_reg $end
$var wire 1 D id_mem_read $end
$var wire 1 E id_jump $end
$var wire 1 F id_branch $end
$var wire 2 G id_alu_src [1:0] $end
$var wire 2 H id_alu_op [1:0] $end
$var wire 32 I forwarded_rs2_data [31:0] $end
$var wire 32 J forwarded_rs1_data [31:0] $end
$var wire 2 K forward_b [1:0] $end
$var wire 2 L forward_a [1:0] $end
$var wire 1 M ex_reg_write $end
$var wire 2 N ex_pc_src [1:0] $end
$var wire 1 O ex_mem_write $end
$var wire 1 P ex_mem_to_reg $end
$var wire 1 Q ex_mem_read $end
$var wire 1 R ex_jump $end
$var wire 1 S ex_branch $end
$var wire 12 T control_signals [11:0] $end
$var wire 32 U branch_target [31:0] $end
$var wire 1 V branch_taken $end
$var wire 1 W alu_zero $end
$var wire 32 X alu_result [31:0] $end
$var wire 32 Y alu_operand_b [31:0] $end
$var wire 32 Z alu_operand_a [31:0] $end
$var wire 4 [ alu_control [3:0] $end
$var reg 32 \ ex_mem_alu_result [31:0] $end
$var reg 1 ] ex_mem_branch_taken $end
$var reg 32 ^ ex_mem_branch_target [31:0] $end
$var reg 8 _ ex_mem_control [7:0] $end
$var reg 5 ` ex_mem_rd_addr [4:0] $end
$var reg 1 a ex_mem_valid $end
$var reg 32 b ex_mem_write_data [31:0] $end
$var reg 12 c id_ex_control [11:0] $end
$var reg 3 d id_ex_funct3 [2:0] $end
$var reg 7 e id_ex_funct7 [6:0] $end
$var reg 32 f id_ex_immediate [31:0] $end
$var reg 32 g id_ex_pc [31:0] $end
$var reg 5 h id_ex_rd_addr [4:0] $end
$var reg 5 i id_ex_rs1_addr [4:0] $end
$var reg 32 j id_ex_rs1_data [31:0] $end
$var reg 5 k id_ex_rs2_addr [4:0] $end
$var reg 32 l id_ex_rs2_data [31:0] $end
$var reg 1 m id_ex_valid $end
$var reg 32 n if_id_instruction [31:0] $end
$var reg 32 o if_id_pc [31:0] $end
$var reg 32 p if_id_pc_plus_4 [31:0] $end
$var reg 1 q if_id_valid $end
$var reg 32 r mem_wb_alu_result [31:0] $end
$var reg 4 s mem_wb_control [3:0] $end
$var reg 5 t mem_wb_rd_addr [4:0] $end
$var reg 32 u mem_wb_read_data [31:0] $end
$var reg 1 v mem_wb_valid $end
$var reg 32 w pc_reg [31:0] $end
$scope module alu $end
$var wire 32 x operand_a [31:0] $end
$var wire 32 y operand_b [31:0] $end
$var wire 1 W zero $end
$var wire 4 z alu_control [3:0] $end
$var parameter 4 { ALU_ADD $end
$var parameter 4 | ALU_AND $end
$var parameter 4 } ALU_OR $end
$var parameter 4 ~ ALU_SLL $end
$var parameter 4 !" ALU_SLT $end
$var parameter 4 "" ALU_SLTU $end
$var parameter 4 #" ALU_SRA $end
$var parameter 4 $" ALU_SRL $end
$var parameter 4 %" ALU_SUB $end
$var parameter 4 &" ALU_XOR $end
$var reg 32 '" result [31:0] $end
$upscope $end
$scope module alu_ctrl $end
$var wire 2 (" alu_op [1:0] $end
$var wire 3 )" funct3 [2:0] $end
$var wire 1 *" funct7_bit30 $end
$var reg 4 +" alu_control [3:0] $end
$upscope $end
$scope module branch_unit $end
$var wire 1 F branch_enable $end
$var wire 3 ," funct3 [2:0] $end
$var wire 32 -" rs1_data [31:0] $end
$var wire 32 ." rs2_data [31:0] $end
$var reg 1 V branch_taken $end
$upscope $end
$scope module control_unit $end
$var wire 7 /" opcode [6:0] $end
$var parameter 7 0" OP_AUIPC $end
$var parameter 7 1" OP_BRANCH $end
$var parameter 7 2" OP_IMM $end
$var parameter 7 3" OP_JAL $end
$var parameter 7 4" OP_JALR $end
$var parameter 7 5" OP_LOAD $end
$var parameter 7 6" OP_LUI $end
$var parameter 7 7" OP_REG $end
$var parameter 7 8" OP_STORE $end
$var reg 12 9" control_signals [11:0] $end
$upscope $end
$scope module dmem $end
$var wire 32 :" address [31:0] $end
$var wire 1 ' clk $end
$var wire 1 Q mem_read $end
$var wire 1 O mem_write $end
$var wire 32 ;" write_data [31:0] $end
$var wire 32 <" read_data [31:0] $end
$upscope $end
$scope module forwarding_unit $end
$var wire 5 =" rd_mem [4:0] $end
$var wire 5 >" rd_wb [4:0] $end
$var wire 1 M reg_write_mem $end
$var wire 1 6 reg_write_wb $end
$var wire 5 ?" rs1_ex [4:0] $end
$var wire 5 @" rs2_ex [4:0] $end
$var wire 2 A" forward_b [1:0] $end
$var wire 2 B" forward_a [1:0] $end
$upscope $end
$scope module imem $end
$var wire 32 C" address [31:0] $end
$var wire 32 D" instruction [31:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 32 E" instruction [31:0] $end
$var wire 7 F" opcode [6:0] $end
$var reg 32 G" immediate [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 1 ' clk $end
$var wire 5 H" rd_addr [4:0] $end
$var wire 1 ( reset $end
$var wire 5 I" rs1_addr [4:0] $end
$var wire 5 J" rs2_addr [4:0] $end
$var wire 32 K" write_data [31:0] $end
$var wire 1 L" write_enable $end
$var wire 32 M" rs2_data [31:0] $end
$var wire 32 N" rs1_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 8"
b110011 7"
b110111 6"
b11 5"
b1100111 4"
b1101111 3"
b10011 2"
b1100011 1"
b10111 0"
b1 &"
b110 %"
b11 $"
b101 #"
b1000 ""
b111 !"
b100 ~
b0 }
b1001 |
b10 {
$end
#0
$dumpvars
b0 N"
b0 M"
0L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b10011 F"
b10011 E"
bx D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b100000011001 9"
b10011 /"
b0 ."
b0 -"
b0 ,"
b10 +"
0*"
b0 )"
b0 ("
b0 '"
b10 z
b0 y
b0 x
b0 w
0v
b0 u
b0 t
b0 s
b0 r
0q
b0 p
b0 o
b10011 n
0m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
0a
b0 `
b0 _
b0 ^
0]
b0 \
b10 [
b0 Z
b0 Y
b0 X
1W
0V
b0 U
b100000011001 T
0S
0R
0Q
0P
0O
b0 N
0M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
0F
0E
0D
0C
0B
b0 A
0@
b0 ?
bx >
b0 =
b100 <
b0 ;
b0 :
b0 9
08
b0 7
06
b0 5
04
03
02
01
b0 0
b10011 /
0.
0-
0,
bx +
bx *
bx )
1(
0'
bx &
bx %
bx $
b10011 #
b0 "
b0 !
$end
#5000
b0 $
b0 +
b0 %
b0 *
b0 &
b0 )
1'
#10000
0'
#15000
1'
#20000
0'
b101000000000000010010011 >
b101000000000000010010011 D"
0(
#25000
b10100000000000100010011 >
b10100000000000100010011 D"
b1000 <
b100 C"
1@
b1 G
b10 H
b10 ("
b1 A
b1000 !
b1000 ;
b1010 J"
b1010 ?
b1010 G"
b100000011001 c
1q
b100 p
b101000000000000010010011 #
b101000000000000010010011 /
b101000000000000010010011 n
b101000000000000010010011 E"
b100 "
b100 0
b100 w
1'
#30000
0'
#35000
b1000001000000110110011 >
b1000001000000110110011 D"
b1100 <
b1000 C"
0W
b1010 X
b1010 '"
b101 J"
b101 ?
b101 G"
b1100 !
b1100 ;
b1010 Y
b1010 y
1M
b1 N
b1000 "
b1000 0
b1000 w
b1000 p
b100 o
b10100000000000100010011 #
b10100000000000100010011 /
b10100000000000100010011 n
b10100000000000100010011 E"
1m
b1 h
b1010 k
b1010 @"
b1010 U
b1010 f
b10000001 _
1'
#40000
0'
#45000
b10011 >
b10011 D"
b1000 :"
b101 X
b101 '"
b100000001000 T
b100000001000 9"
b10000 <
b1100 C"
16
b1 7
b1110 !
b1110 ;
b101 Y
b101 y
b1 I"
b10 J"
b110011 /"
b0 ?
b0 G"
b110011 F"
b1001 s
1a
b1 `
b1 ="
b1010 ^
b1010 \
b10 h
b101 k
b101 @"
b101 f
b1001 U
b100 g
b1100 p
b1000 o
b1000001000000110110011 #
b1000001000000110110011 /
b1000001000000110110011 n
b1000001000000110110011 E"
b1100 "
b1100 0
b1100 w
1'
#50000
0'
#55000
b1010 Z
b1010 x
b1010 J
b1010 -"
b1 L
b1 B"
b101 I
b101 ."
b10100 <
b10000 C"
b100000011001 T
b100000011001 9"
b10 K
b10 A"
0W
b1111 X
b1111 '"
b100 :"
b0 I"
b0 J"
b10011 /"
b10011 F"
b0 G
b0 A
b101 Y
b101 y
b1111 !
b1111 ;
1L"
b1010 5
b1010 K"
b10000 "
b10000 0
b10000 w
b10000 p
b1100 o
b10011 #
b10011 /
b10011 n
b10011 E"
b100000001000 c
b11 h
b10 k
b10 @"
b1 i
b1 ?"
b0 f
b1000 U
b1000 g
b10 `
b10 ="
b1001 ^
b101 \
1v
b1 t
b1 >"
b1 H"
b1010 r
1'
#60000
0'
#65000
1W
b0 Z
b0 x
b0 J
b0 -"
b0 X
b0 '"
b0 L
b0 B"
b0 Y
b0 y
b1100 :"
b0 K
b0 A"
b11000 <
b10100 C"
b101 5
b101 K"
b0 N
b0 I
b0 ."
b1 G
b1 A
b1010 &
b1010 )
b10 t
b10 >"
b10 H"
b101 r
b10000000 _
b11 `
b11 ="
b1000 ^
b101 b
b101 ;"
b1111 \
b100000011001 c
b0 h
b0 k
b0 @"
b0 i
b0 ?"
b1100 U
b1100 g
b10100 p
b10000 o
b10100 "
b10100 0
b10100 w
1'
#70000
0'
#75000
bx >
bx D"
b11100 <
b11000 C"
b0 L
b0 B"
b0 K
b0 A"
b0 :"
b1 N
b0 7
b1111 5
b1111 K"
b101 %
b101 *
b11000 "
b11000 0
b11000 w
b11000 p
b10100 o
b10000 U
b10000 g
b10000001 _
b0 `
b0 ="
b1100 ^
b0 b
b0 ;"
b0 \
b1000 s
b11 t
b11 >"
b11 H"
b1111 r
1'
#80000
0'
#85000
b0 L
b0 B"
b0 K
b0 A"
bx :
bx N"
bx 9
bx M"
b0 T
b0 9"
b100000 <
b11100 C"
b1 7
b0 5
b0 K"
bx I"
bx J"
bx /"
bx F"
b1111 $
b1111 +
b1001 s
b0 t
b0 >"
b0 H"
b0 r
b10000 ^
b10100 U
b10100 g
b11100 p
b11000 o
bx #
bx /
bx n
bx E"
b11100 "
b11100 0
b11100 w
1'
#90000
0'
#95000
xW
bx X
bx '"
bx Y
bx y
bx Z
bx x
b100100 <
b100000 C"
bx I
bx ."
bx J
bx -"
0@
b0 G
b0 H
b0 ("
b0 A
x*"
b100000 "
b100000 0
b100000 w
b100000 p
b11100 o
b0 c
bx e
bx d
bx )"
bx ,"
bx h
bx k
bx @"
bx i
bx ?"
bx l
bx j
b11000 U
b11000 g
b10100 ^
1'
#100000
0'
#105000
bx00 :"
b101000 <
b100100 C"
0M
b0 N
b0 _
bx `
bx ="
b11000 ^
bx b
bx ;"
bx \
b11100 U
b11100 g
b100100 p
b100000 o
b100100 "
b100100 0
b100100 w
1'
#110000
0'
#115000
b101100 <
b101000 C"
0L"
06
b0 7
bx 5
bx K"
b101000 "
b101000 0
b101000 w
b101000 p
b100100 o
b100000 U
b100000 g
b11100 ^
b0 s
bx t
bx >"
bx H"
bx r
1'
#120000
0'
#125000
b110000 <
b101100 C"
b100000 ^
b100100 U
b100100 g
b101100 p
b101000 o
b101100 "
b101100 0
b101100 w
1'
#130000
0'
#135000
b110100 <
b110000 C"
b110000 "
b110000 0
b110000 w
b110000 p
b101100 o
b101000 U
b101000 g
b100100 ^
1'
#140000
0'
#145000
b111000 <
b110100 C"
b101000 ^
b101100 U
b101100 g
b110100 p
b110000 o
b110100 "
b110100 0
b110100 w
1'
#150000
0'
#155000
b111100 <
b111000 C"
b111000 "
b111000 0
b111000 w
b111000 p
b110100 o
b110000 U
b110000 g
b101100 ^
1'
#160000
0'
#165000
b1000000 <
b111100 C"
b110000 ^
b110100 U
b110100 g
b111100 p
b111000 o
b111100 "
b111100 0
b111100 w
1'
